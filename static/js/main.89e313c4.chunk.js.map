{"version":3,"sources":["reducers/postReducer.js","reducers/index.js","actions/types.js","store.js","actions/fetchPostAction.js","components/Posts.js","components/Postform.js","actions/newPostAction.js","App.js","serviceWorker.js","index.js"],"names":["initialState","items","item","combineReducers","posts","state","action","type","payload","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","fetchPosts","dispatch","fetch","then","res","json","Posts","this","props","nextProps","newPost","unshift","postItems","map","post","key","id","title","body","Component","connect","Postform","onChange","bind","onSubmit","e","setState","target","name","value","preventDefault","createPost","postData","method","headers","JSON","stringify","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.89e313c4.chunk.js","sourcesContent":["import { FETCH_POSTS, NEW_POST } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  items: [],\r\n  item: {},\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case NEW_POST:\r\n      return {\r\n        ...state,\r\n        item: action.payload,\r\n      };\r\n    case FETCH_POSTS:\r\n      return {\r\n        ...state,\r\n        items: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport postReducer from \"./postReducer\";\r\n\r\nexport default combineReducers({\r\n  posts: postReducer,\r\n});\r\n","export const FETCH_POSTS = \"FETCH_POSTS\";\r\nexport const NEW_POST = \"NEW_POST\";\r\n","import { applyMiddleware, compose } from \"redux\";\r\nimport { createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);\r\n\r\nexport default store;\r\n","import { FETCH_POSTS } from \"./types\";\r\n\r\nconst fetchPosts = () => (dispatch) => {\r\n  fetch(\"https://jsonplaceholder.typicode.com/posts\")\r\n    .then((res) => res.json())\r\n    .then((posts) =>\r\n      dispatch({\r\n        type: FETCH_POSTS,\r\n        payload: posts,\r\n      })\r\n    );\r\n};\r\n\r\nexport default fetchPosts;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport fetchPosts from \"../actions/fetchPostAction\";\r\n\r\nclass Posts extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchPosts();\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.newPost) {\r\n      this.props.posts.unshift(nextProps.newPost);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const postItems = this.props.posts.map((post) => (\r\n      <div key={post.id}>\r\n        <h3>{post.title}</h3>\r\n        <p>{post.body}</p>\r\n      </div>\r\n    ));\r\n    return (\r\n      <div>\r\n        <h1>Posts</h1>\r\n        {postItems}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPosts.propTypes = {\r\n  fetchPosts: PropTypes.func.isRequired,\r\n  posts: PropTypes.array.isRequired,\r\n  newPost: PropTypes.object,\r\n};\r\n\r\nconst mapStatetoProps = (state) => ({\r\n  posts: state.posts.items,\r\n  newPost: state.posts.item,\r\n});\r\n\r\nexport default connect(mapStatetoProps, { fetchPosts })(Posts);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { createPost } from \"../actions/newPostAction\";\r\n\r\nclass Postform extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: \"\",\r\n      body: \"\",\r\n    };\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n    const post = {\r\n      title: this.state.title,\r\n      body: this.state.body,\r\n    };\r\n\r\n    this.props.createPost(post);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Add Posts</h1>\r\n        <form onSubmit={this.onSubmit}>\r\n          <div>\r\n            <label>Title:</label>\r\n            <br />\r\n            <input\r\n              type=\"text\"\r\n              name=\"title\"\r\n              onChange={this.onChange}\r\n              value={this.state.title}\r\n            />\r\n          </div>\r\n          <br />\r\n          <div>\r\n            <label>Body:</label>\r\n            <br />\r\n            <textarea\r\n              name=\"body\"\r\n              onChange={this.onChange}\r\n              value={this.state.body}\r\n            />\r\n          </div>\r\n          <br />\r\n          <button type=\"submit\">Submit</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPostform.propTypes = {\r\n  createPosts: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, { createPost })(Postform);\r\n","import { NEW_POST } from \"./types\";\r\n\r\nexport const createPost = (postData) => (dispatch) => {\r\n  fetch(\"https://jsonplaceholder.typicode.com/posts\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(postData),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((post) =>\r\n      dispatch({\r\n        type: NEW_POST,\r\n        payload: post,\r\n      })\r\n    );\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport Posts from \"./components/Posts\";\nimport Postform from \"./components/Postform\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Postform />\n        <hr />\n        <Posts />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}